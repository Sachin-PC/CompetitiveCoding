"""
Q1. Generate all Parentheses II

Problem Description
Given an integer A pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*A.



Problem Constraints
1 <= A <= 10



Input Format
First and only argument is integer A.



Output Format
Return a sorted list of all possible parenthesis.



Example Input
Input 1:

A = 3
Input 2:

A = 1


Example Output
Output 1:

[ "((()))", "(()())", "(())()", "()(())", "()()()" ]
Output 2:

[ "()" ]


Example Explanation
Explanation 1:

 All paranthesis are given in the output list.
Explanation 2:

 All paranthesis are given in the output list.
 """
def getParanthesis(A,res,cur_paranthesis,str_len,no_of_open_paranthesis,no_of_closed_paranthesis):
    if str_len == 2*A:
        # print("cur_paranthesis = ",cur_paranthesis)
        res.append(cur_paranthesis)
    else:
        if no_of_open_paranthesis < A:
            new_paranthesis = cur_paranthesis +"("
            getParanthesis(A,res,new_paranthesis,str_len+1,no_of_open_paranthesis+1,no_of_closed_paranthesis)
            # if no_of_open_paranthesis > no_of_closed_paranthesis:
            #     new_paranthesis = new_paranthesis +")"
            #     getParanthesis(A,res,cur_paranthesis,str_len+1,no_of_open_paranthesis,no_of_closed_paranthesis+1)
        if no_of_open_paranthesis > no_of_closed_paranthesis:
            new_paranthesis = cur_paranthesis +")"
            getParanthesis(A,res,new_paranthesis,str_len+1,no_of_open_paranthesis,no_of_closed_paranthesis+1)


class Solution:
	# @param A : integer
	# @return a list of strings
	def generateParenthesis(self, A):
        
        res = []
        str_len = 0
        no_of_open_paranthesis=0
        no_of_closed_paranthesis=0
        cur_paranthesis = ""
        getParanthesis(A,res,cur_paranthesis,str_len,no_of_open_paranthesis,no_of_closed_paranthesis)
        return res